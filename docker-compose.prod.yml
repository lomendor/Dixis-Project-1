# Dixis Platform - Production Docker Compose
# Enterprise-grade orchestration for Greek marketplace production deployment

version: '3.8'

networks:
  dixis-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16
  dixis-internal:
    driver: bridge
    internal: true
  monitoring:
    driver: bridge

volumes:
  mysql-data:
    driver: local
  redis-data:
    driver: local
  elasticsearch-data:
    driver: local
  minio-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  nginx-cache:
    driver: local

x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "100m"
    max-file: "3"
    tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

x-deploy: &default-deploy
  restart_policy:
    condition: on-failure
    delay: 5s
    max_attempts: 3
    window: 120s
  update_config:
    parallelism: 1
    delay: 10s
    failure_action: rollback
    monitor: 60s
  rollback_config:
    parallelism: 1
    delay: 5s
    failure_action: pause
    monitor: 60s

services:
  # ===============================================
  # Load Balancer & Reverse Proxy
  # ===============================================
  
  # Nginx Reverse Proxy
  nginx-proxy:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/config/nginx-proxy/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/config/nginx-proxy/conf.d:/etc/nginx/conf.d:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
    environment:
      - NGINX_WORKER_PROCESSES=auto
      - NGINX_WORKER_CONNECTIONS=2048
    networks:
      - dixis-network
    depends_on:
      - frontend
      - backend
    logging: *default-logging
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ===============================================
  # Core Application Services
  # ===============================================
  
  # Frontend (Next.js Production)
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
      target: runner
      args:
        - NODE_ENV=production
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
        - NEXT_PUBLIC_APP_ENV=production
        - BUILD_DATE=${BUILD_DATE}
        - GIT_COMMIT=${GIT_COMMIT}
        - VERSION=${VERSION}
    expose:
      - "3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_APP_ENV=production
      - HOSTNAME=0.0.0.0
      - PORT=3000
    networks:
      - dixis-network
      - dixis-internal
    depends_on:
      - backend
    logging: *default-logging
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      replicas: 3
      <<: *default-deploy
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # Backend (Laravel Production)
  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
      target: production
      args:
        - PHP_VERSION=8.3
        - BUILD_DATE=${BUILD_DATE}
        - GIT_COMMIT=${GIT_COMMIT}
        - VERSION=${VERSION}
    expose:
      - "8000"
      - "9000"
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - APP_KEY=${APP_KEY}
      - APP_URL=${APP_URL}
      - DB_CONNECTION=mysql
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - CACHE_DRIVER=redis
      - SESSION_DRIVER=redis
      - QUEUE_CONNECTION=redis
      - MAIL_MAILER=${MAIL_MAILER}
      - ELASTICSEARCH_HOST=elasticsearch
      - MINIO_ENDPOINT=minio
      - MINIO_KEY=${MINIO_KEY}
      - MINIO_SECRET=${MINIO_SECRET}
    networks:
      - dixis-network
      - dixis-internal
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    logging: *default-logging
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      replicas: 3
      <<: *default-deploy
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '1.0'
          memory: 512M

  # ===============================================
  # Database Layer
  # ===============================================

  # MySQL Primary Database
  mysql:
    image: mysql:8.0
    expose:
      - "3306"
    volumes:
      - mysql-data:/var/lib/mysql
      - ./docker/config/mysql/prod.cnf:/etc/mysql/conf.d/custom.cnf:ro
      - ./docker/scripts/mysql-init:/docker-entrypoint-initdb.d:ro
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${DB_DATABASE}
      - MYSQL_USER=${DB_USERNAME}
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - MYSQL_CHARACTER_SET_SERVER=utf8mb4
      - MYSQL_COLLATION_SERVER=utf8mb4_unicode_ci
    networks:
      - dixis-internal
    logging: *default-logging
    restart: unless-stopped
    command: >
      --default-authentication-plugin=mysql_native_password
      --innodb-buffer-pool-size=1G
      --innodb-log-file-size=256M
      --max-connections=200
      --query-cache-size=0
      --query-cache-type=0
      --slow-query-log=1
      --slow-query-log-file=/var/log/mysql/mysql-slow.log
      --long-query-time=2
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "${DB_USERNAME}", "-p${DB_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
    deploy:
      <<: *default-deploy
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # Redis Cluster for Caching & Sessions
  redis:
    image: redis:7.2-alpine
    expose:
      - "6379"
    volumes:
      - redis-data:/data
      - ./docker/config/redis/prod.conf:/usr/local/etc/redis/redis.conf:ro
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    networks:
      - dixis-internal
    logging: *default-logging
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      <<: *default-deploy
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # ===============================================
  # Search & Analytics Layer
  # ===============================================

  # Elasticsearch Cluster
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    expose:
      - "9200"
      - "9300"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
      - ./docker/config/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    environment:
      - cluster.name=dixis-production
      - node.name=dixis-es-node-1
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - dixis-internal
    logging: *default-logging
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -u elastic:${ELASTIC_PASSWORD} -f http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    deploy:
      <<: *default-deploy
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # ===============================================
  # File Storage Layer
  # ===============================================

  # MinIO S3-Compatible Storage
  minio:
    image: minio/minio:latest
    expose:
      - "9000"
      - "9001"
    volumes:
      - minio-data:/data
    environment:
      - MINIO_ROOT_USER=${MINIO_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET}
      - MINIO_REGION=eu-central-1
      - MINIO_BROWSER_REDIRECT_URL=${MINIO_CONSOLE_URL}
    command: server /data --console-address ":9001"
    networks:
      - dixis-internal
      - dixis-network
    logging: *default-logging
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      <<: *default-deploy
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # ===============================================
  # Queue Processing Layer
  # ===============================================

  # High-Priority Queue Worker
  queue-high:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
      target: queue-worker
    command: php artisan queue:work --queue=critical,high-priority --tries=1 --timeout=300 --memory=256
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - DB_CONNECTION=mysql
      - DB_HOST=mysql
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - QUEUE_CONNECTION=redis
    networks:
      - dixis-internal
    depends_on:
      - mysql
      - redis
    logging: *default-logging
    restart: unless-stopped
    deploy:
      replicas: 2
      <<: *default-deploy
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # Greek Market Queue Worker
  queue-greek:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
      target: queue-worker
    command: php artisan queue:work --queue=greek-market,payments --tries=3 --timeout=180 --memory=256
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - DB_CONNECTION=mysql
      - DB_HOST=mysql
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - QUEUE_CONNECTION=redis
    networks:
      - dixis-internal
    depends_on:
      - mysql
      - redis
    logging: *default-logging
    restart: unless-stopped
    deploy:
      replicas: 3
      <<: *default-deploy
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # General Queue Worker
  queue-general:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
      target: queue-worker
    command: php artisan queue:work --queue=default,emails,notifications --tries=3 --timeout=90 --memory=256
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - DB_CONNECTION=mysql
      - DB_HOST=mysql
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - QUEUE_CONNECTION=redis
    networks:
      - dixis-internal
    depends_on:
      - mysql
      - redis
    logging: *default-logging
    restart: unless-stopped
    deploy:
      replicas: 2
      <<: *default-deploy
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  # Laravel Scheduler
  scheduler:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
      target: scheduler
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - DB_CONNECTION=mysql
      - DB_HOST=mysql
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - dixis-internal
    depends_on:
      - mysql
      - redis
    logging: *default-logging
    restart: unless-stopped
    deploy:
      replicas: 1
      <<: *default-deploy
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  # ===============================================
  # Monitoring & Observability
  # ===============================================

  # Prometheus Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    expose:
      - "9090"
    volumes:
      - prometheus-data:/prometheus
      - ./docker/config/prometheus/prod.yml:/etc/prometheus/prometheus.yml:ro
      - ./docker/config/prometheus/rules:/etc/prometheus/rules:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - monitoring
      - dixis-internal
    logging: *default-logging
    restart: unless-stopped
    deploy:
      <<: *default-deploy
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Grafana Monitoring Dashboard
  grafana:
    image: grafana/grafana:latest
    expose:
      - "3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/config/grafana/prod.ini:/etc/grafana/grafana.ini:ro
      - ./docker/config/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./docker/config/grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_DATABASE_TYPE=mysql
      - GF_DATABASE_HOST=mysql:3306
      - GF_DATABASE_NAME=${GRAFANA_DB_NAME}
      - GF_DATABASE_USER=${GRAFANA_DB_USER}
      - GF_DATABASE_PASSWORD=${GRAFANA_DB_PASSWORD}
    networks:
      - monitoring
      - dixis-internal
    depends_on:
      - prometheus
      - mysql
    logging: *default-logging
    restart: unless-stopped
    deploy:
      <<: *default-deploy
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Node Exporter (System metrics)
  node-exporter:
    image: prom/node-exporter:latest
    expose:
      - "9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - monitoring
    logging: *default-logging
    restart: unless-stopped

  # ===============================================
  # Security & Backup
  # ===============================================

  # Database Backup Service
  db-backup:
    image: alpine:latest
    volumes:
      - mysql-data:/var/lib/mysql:ro
      - ./backups:/backups
      - ./docker/scripts/backup.sh:/backup.sh:ro
    environment:
      - DB_HOST=mysql
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - BACKUP_RETENTION_DAYS=30
    command: sh -c "apk add --no-cache mysql-client && /backup.sh"
    networks:
      - dixis-internal
    depends_on:
      - mysql
    logging: *default-logging
    restart: "no"  # Run on-demand
    profiles:
      - backup

  # SSL Certificate Renewal
  certbot:
    image: certbot/certbot:latest
    volumes:
      - ./docker/ssl:/etc/letsencrypt
      - ./docker/ssl-challenge:/var/www/certbot
    command: certbot certonly --webroot --webroot-path=/var/www/certbot --email ${SSL_EMAIL} --agree-tos --no-eff-email -d ${DOMAIN}
    profiles:
      - ssl-renewal