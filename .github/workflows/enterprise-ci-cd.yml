name: üöÄ Enterprise CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened, ready_for_review]

env:
  NODE_VERSION: '20'
  PHP_VERSION: '8.3'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# Optimized concurrency for monorepo
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Change Detection for Monorepo Optimization
  changes:
    name: üîç Detect Changes
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      backend: ${{ steps.changes.outputs.backend }}
      docs: ${{ steps.changes.outputs.docs }}
      docker: ${{ steps.changes.outputs.docker }}
      workflows: ${{ steps.changes.outputs.workflows }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
              - 'package*.json'
            backend:
              - 'backend/**'
              - 'composer.*'
            docs:
              - 'docs/**'
              - '*.md'
            docker:
              - 'docker/**'
              - 'Dockerfile*'
              - 'docker-compose*.yml'
            workflows:
              - '.github/workflows/**'

  # Frontend CI/CD Pipeline
  frontend:
    name: üé® Frontend Pipeline
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.workflows == 'true'
    defaults:
      run:
        working-directory: ./frontend
    
    strategy:
      matrix:
        stage: [lint, test, build, e2e]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Cache Next.js build
        if: matrix.stage == 'build'
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/frontend/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('frontend/package-lock.json') }}-${{ hashFiles('frontend/**/*.js', 'frontend/**/*.jsx', 'frontend/**/*.ts', 'frontend/**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('frontend/package-lock.json') }}-

      # Lint Stage
      - name: Run ESLint
        if: matrix.stage == 'lint'
        run: npm run lint

      - name: Run Prettier check
        if: matrix.stage == 'lint'
        run: npm run prettier:check

      - name: TypeScript type checking
        if: matrix.stage == 'lint'
        run: npm run type-check

      # Test Stage
      - name: Run unit tests
        if: matrix.stage == 'test'
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        if: matrix.stage == 'test'
        uses: codecov/codecov-action@v4
        with:
          directory: ./frontend/coverage
          flags: frontend
          token: ${{ secrets.CODECOV_TOKEN }}

      # Build Stage
      - name: Build application
        if: matrix.stage == 'build'
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ vars.NEXT_PUBLIC_API_URL }}
          NEXT_PUBLIC_APP_ENV: ${{ vars.NEXT_PUBLIC_APP_ENV }}

      - name: Upload build artifacts
        if: matrix.stage == 'build'
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-${{ github.run_number }}
          path: frontend/.next
          retention-days: 7

      # E2E Testing Stage
      - name: Setup Laravel backend for E2E
        if: matrix.stage == 'e2e'
        working-directory: ./backend
        run: |
          composer install --no-dev --optimize-autoloader
          cp .env.testing .env
          php artisan key:generate
          php artisan migrate --force
          php artisan serve --port=8000 &
          sleep 5

      - name: Install Playwright
        if: matrix.stage == 'e2e'
        run: npx playwright install --with-deps

      - name: Run E2E tests
        if: matrix.stage == 'e2e'
        run: npm run test:e2e
        env:
          CI: true

      - name: Upload E2E artifacts
        if: matrix.stage == 'e2e' && failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ github.run_number }}
          path: frontend/playwright-report/
          retention-days: 30

  # Backend CI/CD Pipeline
  backend:
    name: ‚öôÔ∏è Backend Pipeline
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.backend == 'true' || needs.changes.outputs.workflows == 'true'
    defaults:
      run:
        working-directory: ./backend

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: dixis_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    strategy:
      matrix:
        stage: [lint, test, integration]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, bcmath, pdo, mysql, redis, zip, gd, imagick
          coverage: xdebug
          tools: composer:v2

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache/files
          key: ${{ runner.os }}-composer-${{ hashFiles('backend/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-suggest --optimize-autoloader

      # Lint Stage
      - name: Run PHP CS Fixer
        if: matrix.stage == 'lint'
        run: vendor/bin/php-cs-fixer fix --dry-run --diff --verbose

      - name: Run PHPStan
        if: matrix.stage == 'lint'
        run: vendor/bin/phpstan analyse --memory-limit=1G

      - name: Run Psalm
        if: matrix.stage == 'lint'
        run: vendor/bin/psalm --threads=4

      # Test Stage
      - name: Prepare Laravel application
        if: matrix.stage == 'test'
        run: |
          cp .env.testing .env
          php artisan key:generate
          php artisan config:cache
          php artisan migrate --force

      - name: Run PHPUnit tests
        if: matrix.stage == 'test'
        run: vendor/bin/phpunit --coverage-clover=coverage.xml --log-junit=junit.xml

      - name: Upload coverage to Codecov
        if: matrix.stage == 'test'
        uses: codecov/codecov-action@v4
        with:
          directory: ./backend
          files: coverage.xml
          flags: backend
          token: ${{ secrets.CODECOV_TOKEN }}

      # Integration Test Stage
      - name: Run Feature tests
        if: matrix.stage == 'integration'
        run: |
          cp .env.testing .env
          php artisan key:generate
          php artisan migrate --force --seed
          vendor/bin/phpunit --testsuite=Feature

      - name: Test API endpoints
        if: matrix.stage == 'integration'
        run: |
          php artisan serve --port=8000 &
          sleep 5
          curl -f http://localhost:8000/api/v1/health || exit 1
          curl -f http://localhost:8000/api/v1/products?per_page=5 || exit 1

  # Docker Build & Security Scan
  docker:
    name: üê≥ Docker Build & Scan
    runs-on: ubuntu-latest
    needs: [changes, frontend, backend]
    if: needs.changes.outputs.docker == 'true' || (needs.changes.outputs.frontend == 'true' && needs.changes.outputs.backend == 'true')
    
    strategy:
      matrix:
        component: [frontend, backend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.${{ matrix.component }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Documentation Generation
  docs:
    name: üìö Documentation Generation
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.docs == 'true' || needs.changes.outputs.workflows == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Generate API documentation
        working-directory: ./backend
        run: |
          composer install
          php artisan l5-swagger:generate

      - name: Generate frontend documentation
        working-directory: ./frontend
        run: |
          npm ci
          npm run docs:generate || echo "Docs generation skipped"

      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/generated

  # Quality Gates & Deployment
  quality-gates:
    name: üéØ Quality Gates
    runs-on: ubuntu-latest
    needs: [frontend, backend, docker]
    if: always()
    
    steps:
      - name: Check quality gate status
        run: |
          echo "Frontend Status: ${{ needs.frontend.result }}"
          echo "Backend Status: ${{ needs.backend.result }}"
          echo "Docker Status: ${{ needs.docker.result }}"
          
          if [[ "${{ needs.frontend.result }}" != "success" || "${{ needs.backend.result }}" != "success" ]]; then
            echo "‚ùå Quality gates failed"
            exit 1
          else
            echo "‚úÖ All quality gates passed"
          fi

      - name: Deployment notification
        if: github.ref == 'refs/heads/main' && success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#dixis-deployments'
          text: 'üöÄ Dixis Platform ready for production deployment on main branch'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Performance Benchmarking
  performance:
    name: ‚ö° Performance Benchmarks
    runs-on: ubuntu-latest
    needs: quality-gates
    if: github.ref == 'refs/heads/main' && needs.quality-gates.result == 'success'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Run Lighthouse CI
        working-directory: ./frontend
        run: |
          npm ci
          npm run build
          npm run start &
          sleep 10
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload performance report
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-report-${{ github.run_number }}
          path: frontend/.lighthouseci