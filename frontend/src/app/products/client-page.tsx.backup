'use client';

import { logger } from '@/lib/logging/productionLogger';
import { toError, errorToContext } from '@/lib/utils/errorUtils';

import React, { useState, useEffect, useCallback } from 'react';
import Link from 'next/link';
import { NetworkAwareLoading, LazyLoad, IncrementalLoading, ProgressiveImage, SkeletonGrid } from '@/components/mobile/ProgressiveLoading';
import TouchGestures from '@/components/mobile/TouchInteractions';
import EnhancedProductFilters from '@/components/products/EnhancedProductFilters';
import { ProductPrice } from '@/components/ui/Price';
import ModernCartButton from '@/components/cart/ModernCartButton';
import { ErrorBoundary } from '@/components/error/ErrorBoundary';
import { Heart, MapPin, Truck, Leaf, Award, Star, Clock, Users } from 'lucide-react';

interface FilterOption {
  id: string;
  label: string;
  count: number;
}

interface Product {
  id: number;
  name: string;
  price: number;
  discount_price?: number;
  main_image: string;
  stock: number;
  producer?: {
    business_name: string;
    bio?: string;
    city?: string;
    region?: string;
    logo?: string;
    verified?: boolean;
    rating?: number;
    specialties?: string[];
  };
  producer_id: number;
  slug: string;
  description: string;
  short_description: string;
  is_active: boolean;
  is_featured: boolean;
  is_organic?: boolean;
  is_seasonal?: boolean;
  category?: {
    name: string;
    slug: string;
  };
  rating?: number;
  reviews_count?: number;
  harvest_date?: string;
  origin_story?: string;
}

export default function ProductsPage() {
  const [products, setProducts] = useState<Product[]>([]);
  const [filteredProducts, setFilteredProducts] = useState<Product[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [categories, setCategories] = useState<FilterOption[]>([]);
  const [locations, setLocations] = useState<FilterOption[]>([]);
  const [priceRange, setPriceRange] = useState({ min: 0, max: 1000 });
  const [mounted, setMounted] = useState(false);

  useEffect(() => {
    setMounted(true);
  }, []);

  useEffect(() => {
    if (!mounted) {
      console.log('‚è≥ Not mounted yet, skipping fetch');
      return;
    }
    console.log('üîç Fetching products...');
    fetch('/api/products?per_page=100&include=category,producer')
      .then(res => {
        console.log('üì° Response received:', res.status, res.ok);
        if (!res.ok) {
          throw new Error(`HTTP ${res.status}: ${res.statusText}`);
        }
        return res.json();
      })
      .then(data => {
        console.log('üì¶ Data received:', data);
        const productsData = data.data || data || [];
        console.log('üî¢ Products count:', productsData.length);
        console.log('üìã First product:', productsData[0]);
        setProducts(productsData);
        setFilteredProducts(productsData);
        
        // Extract unique categories with counts
        const categoryMap = new Map();
        const locationMap = new Map();
        let minPrice = Infinity;
        let maxPrice = 0;
        
        productsData.forEach((product: Product) => {
          // Extract categories
          if (product.category) {
            const key = product.category.slug || product.category.name;
            categoryMap.set(key, {
              id: key,
              label: product.category.name,
              count: (categoryMap.get(key)?.count || 0) + 1
            });
          }
          
          // Extract locations
          if (product.producer?.region) {
            const region = product.producer.region;
            locationMap.set(region, {
              id: region.toLowerCase().replace(/\s+/g, '-'),
              label: region,
              count: (locationMap.get(region)?.count || 0) + 1
            });
          }
          
          // Calculate price range
          const price = product.discount_price || product.price;
          if (price < minPrice) minPrice = price;
          if (price > maxPrice) maxPrice = price;
        });
        
        setCategories(Array.from(categoryMap.values()).sort((a, b) => b.count - a.count));
        setLocations(Array.from(locationMap.values()).sort((a, b) => b.count - a.count));
        setPriceRange({ min: Math.floor(minPrice), max: Math.ceil(maxPrice) });
        
        console.log('‚úÖ Setting loading to false');
        setLoading(false);
      })
      .catch(err => {
        console.error('‚ùå Error fetching products:', err);
        logger.error('Failed to fetch products:', toError(err), errorToContext(err));
        setError('ŒõœÖœÄŒøœçŒºŒ±œÉœÑŒµ, Œ¥ŒµŒΩ ŒºœÄŒøœÅŒ≠œÉŒ±ŒºŒµ ŒΩŒ± œÜŒøœÅœÑœéœÉŒøœÖŒºŒµ œÑŒ± œÄœÅŒøœäœåŒΩœÑŒ±. Œ†Œ±œÅŒ±Œ∫Œ±ŒªŒøœçŒºŒµ Œ¥ŒøŒ∫ŒπŒºŒ¨œÉœÑŒµ ŒæŒ±ŒΩŒ¨.');
        setLoading(false);
      });
  }, [mounted]);

  const handleFiltersChange = useCallback((filters: any) => {
    let filtered = [...products];

    // Search filter
    if (filters.search) {
      filtered = filtered.filter(product =>
        product.name.toLowerCase().includes(filters.search.toLowerCase()) ||
        product?.description?.toLowerCase().includes(filters.search.toLowerCase()) ||
        product?.producer?.business_name?.toLowerCase().includes(filters.search.toLowerCase())
      );
    }

    // Category filter
    if (filters.categories && filters.categories.length > 0) {
      filtered = filtered.filter(product => {
        if (!product.category) return false;
        const categoryId = product.category.slug || product.category.name;
        return filters.categories.includes(categoryId);
      });
    }

    // Location filter
    if (filters.locations && filters.locations.length > 0) {
      filtered = filtered.filter(product => {
        if (!product.producer?.region) return false;
        const locationId = product.producer.region.toLowerCase().replace(/\s+/g, '-');
        return filters.locations.includes(locationId);
      });
    }

    // Price range filter
    if (filters.priceRange) {
      filtered = filtered.filter(product => {
        const price = product.discount_price || product.price;
        return price >= filters.priceRange.min && price <= filters.priceRange.max;
      });
    }

    // Stock filter
    if (filters.inStock) {
      filtered = filtered.filter(product => product.stock > 0);
    }

    // Organic filter
    if (filters.isOrganic) {
      filtered = filtered.filter(product => product.is_organic);
    }

    // Seasonal filter
    if (filters.isSeasonal) {
      filtered = filtered.filter(product => product.is_seasonal);
    }

    // Featured filter
    if (filters.isFeatured) {
      filtered = filtered.filter(product => product.is_featured);
    }

    // Sort
    switch (filters.sortBy) {
      case 'price_low':
        filtered.sort((a, b) => (a.discount_price || a.price) - (b.discount_price || b.price));
        break;
      case 'price_high':
        filtered.sort((a, b) => (b.discount_price || b.price) - (a.discount_price || a.price));
        break;
      case 'newest':
        filtered.sort((a, b) => b.id - a.id);
        break;
      case 'rating':
        filtered.sort((a, b) => (b.rating || 0) - (a.rating || 0));
        break;
      case 'name':
      default:
        filtered.sort((a, b) => a.name.localeCompare(b.name, 'el'));
        break;
    }

    setFilteredProducts(filtered);
  }, [products]);


  if (loading || !mounted) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-green-50 via-white to-blue-50">
        {/* Loading Hero */}
        <div className="bg-gradient-to-r from-green-600 to-green-700 text-white">
          <div className="container mx-auto px-4 py-8">
            <div className="text-center">
              <div className="h-10 bg-white/20 rounded-lg w-3/4 mx-auto mb-3 animate-pulse"></div>
              <div className="h-6 bg-white/20 rounded-lg w-1/2 mx-auto animate-pulse"></div>
            </div>
          </div>
        </div>
        
        <div className="container mx-auto px-4 py-6">
          {/* Loading Filters */}
          <div className="mb-6">
            <div className="h-10 bg-gray-200 rounded-lg w-32 mb-4 animate-pulse"></div>
            <div className="h-12 bg-gray-200 rounded-lg w-full mb-6 animate-pulse"></div>
          </div>
          
          {/* Loading Grid */}
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            {[...Array(12)].map((_, i) => (
              <div key={i} className="bg-white rounded-lg shadow-md overflow-hidden">
                <div className="h-48 bg-gray-200 animate-pulse"></div>
                <div className="p-4">
                  <div className="h-5 bg-gray-200 rounded w-3/4 mb-2 animate-pulse"></div>
                  <div className="h-4 bg-gray-200 rounded w-1/2 mb-3 animate-pulse"></div>
                  <div className="h-8 bg-gray-200 rounded w-1/3 mb-3 animate-pulse"></div>
                  <div className="h-10 bg-gray-200 rounded w-full animate-pulse"></div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-green-50 via-white to-blue-50 flex items-center justify-center">
        <div className="text-center p-8">
          <div className="mb-4">
            <svg className="mx-auto h-12 w-12 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
          </div>
          <h2 className="text-xl font-semibold text-gray-900 mb-2">ŒöŒ¨œÑŒπ œÄŒÆŒ≥Œµ œÉœÑœÅŒ±Œ≤Œ¨</h2>
          <p className="text-gray-600 mb-6">{error}</p>
          <button
            onClick={() => window.location.reload()}
            className="bg-green-600 hover:bg-green-700 text-white font-medium py-2 px-6 rounded-lg transition-colors"
          >
            ŒïœÄŒ±ŒΩŒ±œÜœåœÅœÑœâœÉŒ∑ Œ£ŒµŒªŒØŒ¥Œ±œÇ
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 via-white to-blue-50">
      {/* Compact Hero Section */}
      <div className="bg-gradient-to-r from-green-600 to-green-700 text-white">
        <div className="container mx-auto px-4 py-8">
          <div className="text-center max-w-4xl mx-auto">
            <h1 className="text-3xl md:text-4xl font-bold mb-3">
              Œ†œÅŒøœäœåŒΩœÑŒ± ŒëœÄœå ŒàŒªŒªŒ∑ŒΩŒµœÇ Œ†Œ±œÅŒ±Œ≥œâŒ≥ŒøœçœÇ
            </h1>
            
            <p className="text-lg text-green-100 mb-6 max-w-2xl mx-auto">
              ŒëŒΩŒ±Œ∫Œ±ŒªœçœàœÑŒµ œÑŒ∑ŒΩ Œ±œÖŒ∏ŒµŒΩœÑŒπŒ∫ŒÆ ŒïŒªŒªŒ∑ŒΩŒπŒ∫ŒÆ Œ≥ŒµœçœÉŒ∑ Œ±œÄœå ŒµœÄŒπŒªŒµŒ≥ŒºŒ≠ŒΩŒøœÖœÇ œÄŒ±œÅŒ±Œ≥œâŒ≥ŒøœçœÇ
            </p>

            {/* Compact Stats */}
            <div className="flex justify-center items-center space-x-8 text-sm">
              <div className="flex items-center">
                <Users className="mr-2 h-4 w-4 text-green-200" />
                <span className="text-green-100"><span className="font-bold text-white">{filteredProducts.length}</span> Œ†œÅŒøœäœåŒΩœÑŒ±</span>
              </div>
              <div className="flex items-center">
                <Award className="mr-2 h-4 w-4 text-green-200" />
                <span className="text-green-100"><span className="font-bold text-white">50+</span> Œ†Œ±œÅŒ±Œ≥œâŒ≥ŒøŒØ</span>
              </div>
              <div className="flex items-center">
                <Clock className="mr-2 h-4 w-4 text-green-200" />
                <span className="text-green-100"><span className="font-bold text-white">24h</span> Œ†Œ±œÅŒ¨Œ¥ŒøœÉŒ∑</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="container mx-auto px-4 py-6">
        {/* Enhanced Filters */}
        <EnhancedProductFilters 
          onFiltersChange={handleFiltersChange}
          productsCount={filteredProducts.length}
          categories={categories}
          locations={locations}
          priceRange={priceRange}
        />

        {/* Mobile-optimized Products Grid with Progressive Loading */}
        {filteredProducts.length === 0 ? (
          <div className="text-center py-8 lg:py-12">
            <p className="mobile-body lg:text-lg text-gray-500">ŒîŒµŒΩ Œ≤œÅŒ≠Œ∏Œ∑Œ∫Œ±ŒΩ œÄœÅŒøœäœåŒΩœÑŒ±</p>
          </div>
        ) : (
          <IncrementalLoading
            items={filteredProducts}
            initialCount={12}
            incrementCount={12}
            loadMoreText="Œ¶œåœÅœÑœâœÉŒ∑ œÄŒµœÅŒπœÉœÉœåœÑŒµœÅœâŒΩ œÄœÅŒøœäœåŒΩœÑœâŒΩ"
            className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6"
            renderItem={(product, index) => (
              <LazyLoad key={product.id} threshold={0.2} rootMargin="100px">
                <TouchGestures
                  onLongPress={() => logger.debug('Product long press', { productId: product.id })}
                  onDoubleTap={() => window.open(`/products/${product.slug}`, '_blank')}
                >
                  <div className="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-all duration-300 border border-gray-100 group h-full flex flex-col">
                    <Link href={`/products/${product.slug}`} className="block">
                      <div className="relative overflow-hidden">
                        <ProgressiveImage
                          src={product.main_image || 'https://images.unsplash.com/photo-1546069901-ba9599a7e63c?w=400&h=300&fit=crop'}
                          alt={product.name}
                          className="w-full h-48 object-cover group-hover:scale-105 transition-transform duration-300"
                          quality="high"
                          placeholder="https://images.unsplash.com/photo-1546069901-ba9599a7e63c?w=100&h=75&fit=crop&blur=10"
                        />
                        
                        {/* Premium Badge Overlay */}
                        <div className="absolute inset-0 bg-gradient-to-t from-black/20 via-transparent to-transparent" />
                        
                        {/* Certification Badges */}
                        <div className="absolute top-3 left-3 flex flex-col gap-2">
                          {product.is_organic && (
                            <div className="bg-green-500 text-white px-3 py-1 rounded-full text-xs font-medium flex items-center shadow-lg">
                              <Leaf className="mr-1 h-3 w-3" />
                              ŒíŒπŒøŒªŒøŒ≥ŒπŒ∫œå
                            </div>
                          )}
                          {product.is_featured && (
                            <div className="bg-amber-500 text-white px-3 py-1 rounded-full text-xs font-medium flex items-center shadow-lg">
                              <Star className="mr-1 h-3 w-3" />
                              ŒïœÄŒπŒªŒµŒ≥ŒºŒ≠ŒΩŒø
                            </div>
                          )}
                          {product.is_seasonal && (
                            <div className="bg-blue-500 text-white px-3 py-1 rounded-full text-xs font-medium shadow-lg">
                              ŒïœÄŒøœáŒπŒ±Œ∫œå
                            </div>
                          )}
                        </div>
                        
                        {/* Wishlist Button */}
                        <TouchGestures onLongPress={() => console.log('Favorite long press')}>
                          <button className="absolute top-3 right-3 p-2 bg-white/95 backdrop-blur-sm rounded-full shadow-lg hover:bg-white hover:scale-110 transition-all duration-200 group">
                            <Heart className="h-4 w-4 text-gray-600 group-hover:text-red-500 transition-colors" />
                          </button>
                        </TouchGestures>
                        
                        {/* Discount Badge */}
                        {product.discount_price && (
                          <div className="absolute bottom-3 left-3 bg-red-500 text-white px-3 py-1 rounded-full text-xs font-bold shadow-lg">
                            -{Math.round(((product.price - product.discount_price) / product.price) * 100)}%
                          </div>
                        )}
                      </div>
                    </Link>

                    <div className="p-4 flex-1 flex flex-col">
                      {/* Product Title */}
                      <h3 className="font-bold text-base text-gray-900 mb-2 line-clamp-2">
                        {product.name}
                      </h3>

                      {/* Producer Info - Simplified */}
                      {product.producer && (
                        <div className="flex items-center text-sm text-gray-600 mb-3">
                          <Users className="h-4 w-4 mr-1 text-gray-400" />
                          <span className="truncate">{product.producer.business_name}</span>
                          {product.producer.verified && (
                            <Award className="ml-1 h-3 w-3 text-green-600 flex-shrink-0" />
                          )}
                        </div>
                      )}

                      {/* Category & Location */}
                      <div className="flex items-center space-x-2 mb-3 text-xs">
                        {product.category && (
                          <span className="bg-gray-100 text-gray-700 px-2 py-1 rounded">
                            {product.category.name}
                          </span>
                        )}
                        {product.producer?.region && (
                          <span className="flex items-center text-gray-500">
                            <MapPin className="h-3 w-3 mr-1" />
                            {product.producer.region}
                          </span>
                        )}
                      </div>

                      {/* Price & Stock - moved to bottom */}
                      <div className="mt-auto">
                        <div className="flex items-center justify-between mb-3">
                          <ProductPrice
                            price={product.price}
                            discountPrice={product.discount_price}
                            originalCurrency="EUR"
                            size="md"
                          />
                          {product.stock > 0 ? (
                            <span className="text-xs text-green-600 font-medium">
                              ‚úì ŒîŒπŒ±Œ∏Œ≠œÉŒπŒºŒø
                            </span>
                          ) : (
                            <span className="text-xs text-red-600 font-medium">
                              ŒúŒ∑ Œ¥ŒπŒ±Œ∏Œ≠œÉŒπŒºŒø
                            </span>
                          )}
                        </div>

                        {/* Action Button */}
                        {product.stock > 0 ? (
                          <ErrorBoundary fallback={
                            <button className="w-full bg-green-600 text-white py-2.5 px-4 rounded-lg font-medium">
                              Œ†œÅŒøœÉŒ∏ŒÆŒ∫Œ∑ œÉœÑŒø ŒöŒ±ŒªŒ¨Œ∏Œπ
                            </button>
                          }>
                            <ModernCartButton
                              productId={product.id}
                              productName={product.name}
                              price={product.discount_price || product.price}
                              disabled={product.stock === 0}
                              attributes={{
                                productName: product.name,
                                price: product.discount_price || product.price,
                                image: product.main_image || 'https://images.unsplash.com/photo-1546069901-ba9599a7e63c?w=400&h=300&fit=crop',
                                producer: product.producer?.business_name || 'Unknown Producer',
                                slug: product.slug
                              }}
                              size="md"
                              variant="primary"
                              className="w-full bg-green-600 hover:bg-green-700 text-white rounded-lg font-medium"
                            />
                          </ErrorBoundary>
                        ) : (
                          <button
                            className="w-full bg-gray-300 cursor-not-allowed text-white py-2.5 px-4 rounded-lg font-medium flex items-center justify-center text-sm"
                            disabled={true}
                          >
                            ŒúŒ∑ ŒîŒπŒ±Œ∏Œ≠œÉŒπŒºŒø
                          </button>
                        )}
                      </div>
                    </div>
                  </div>
                </TouchGestures>
              </LazyLoad>
            )}
          />
        )}
      </div>
    </div>
  );
}