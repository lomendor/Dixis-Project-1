version: '3.8'

services:
  # PHP-FPM Application (Production)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: dixis-app-prod
    restart: always
    working_dir: /var/www/html
    networks:
      - dixis-network
    depends_on:
      - database
      - redis
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - APP_KEY=${APP_KEY}
      - APP_URL=${APP_URL}
      - DB_HOST=database
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - QUEUE_CONNECTION=redis
      - CACHE_DRIVER=redis
      - SESSION_DRIVER=redis
      - MAIL_MAILER=${MAIL_MAILER}
      - MAIL_HOST=${MAIL_HOST}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - STRIPE_KEY=${STRIPE_KEY}
      - STRIPE_SECRET=${STRIPE_SECRET}
    volumes:
      - app-storage:/var/www/html/storage
      - app-uploads:/var/www/html/public/storage
    healthcheck:
      test: ["CMD-SHELL", "php artisan tinker --execute='echo \"OK\";'"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Web Server (Production)
  webserver:
    build:
      context: .
      dockerfile: Dockerfile
      target: nginx
    container_name: dixis-webserver-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - app-uploads:/var/www/html/public/storage:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - ./docker/nginx/prod.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - dixis-network
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # MySQL Database (Production)
  database:
    image: mysql:8.0
    container_name: dixis-database-prod
    restart: always
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
    volumes:
      - dixis-mysql-data:/var/lib/mysql
      - ./docker/mysql/prod.cnf:/etc/mysql/conf.d/prod.cnf:ro
      - ./backups:/backups
    networks:
      - dixis-network
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache & Session Store (Production)
  redis:
    image: redis:7-alpine
    container_name: dixis-redis-prod
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --save 60 1000
    volumes:
      - dixis-redis-data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - dixis-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # Queue Worker (Production)
  queue:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: dixis-queue-prod
    restart: always
    working_dir: /var/www/html
    networks:
      - dixis-network
    depends_on:
      - database
      - redis
      - app
    environment:
      - APP_ENV=production
      - APP_KEY=${APP_KEY}
      - DB_HOST=database
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - QUEUE_CONNECTION=redis
    volumes:
      - app-storage:/var/www/html/storage
    command: php artisan queue:work --verbose --tries=3 --timeout=60 --memory=512 --sleep=3
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep '[q]ueue:work' || exit 1"]
      interval: 60s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Scheduler (Production)
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: dixis-scheduler-prod
    restart: always
    working_dir: /var/www/html
    networks:
      - dixis-network
    depends_on:
      - database
      - redis
      - app
    environment:
      - APP_ENV=production
      - APP_KEY=${APP_KEY}
      - DB_HOST=database
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - app-storage:/var/www/html/storage
    command: >
      sh -c "while true; do
        php artisan schedule:run --verbose --no-interaction
        sleep 60
      done"
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep '[s]chedule:run' || exit 1"]
      interval: 120s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # Backup Service
  backup:
    image: alpine:latest
    container_name: dixis-backup
    restart: "no"
    networks:
      - dixis-network
    depends_on:
      - database
    volumes:
      - dixis-mysql-data:/var/lib/mysql:ro
      - ./backups:/backups
      - ./docker/scripts/backup.sh:/backup.sh:ro
    environment:
      - DB_HOST=database
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
    command: sh /backup.sh
    profiles:
      - backup

volumes:
  dixis-mysql-data:
    driver: local
  dixis-redis-data:
    driver: local
  app-storage:
    driver: local
  app-uploads:
    driver: local

networks:
  dixis-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16