name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  PHP_VERSION: "8.3"
  NODE_VERSION: "20"
  CACHE_VERSION: 1

jobs:
  # Backend Laravel Tests
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: dixis_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    defaults:
      run:
        working-directory: backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, pdo_mysql, gd, redis
          coverage: xdebug

      - name: Copy .env
        run: cp .env.testing .env

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}-v${{ env.CACHE_VERSION }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Generate key
        run: php artisan key:generate

      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache

      - name: Run Migrations
        run: php artisan migrate --force

      - name: Execute tests
        run: php artisan test --parallel --coverage-clover coverage.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend

  # Frontend Next.js Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: frontend-new

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend-new/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript check
        run: npm run type-check || npx tsc --noEmit

      - name: Run Tests
        run: npm test -- --coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend-new/coverage/lcov.info
          flags: frontend

  # Code Quality Checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: dom, curl, libxml, mbstring, zip
          tools: phpstan, php-cs-fixer

      - name: Run PHPStan
        working-directory: backend
        run: |
          composer install --no-interaction --prefer-dist
          ./vendor/bin/phpstan analyse --memory-limit=2G

      - name: Check PHP Code Style
        working-directory: backend
        run: php-cs-fixer fix --dry-run --diff

  # Security Checks
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Laravel Security Check
        working-directory: backend
        run: |
          composer install --no-interaction --prefer-dist
          composer audit

      - name: Run NPM Security Check
        working-directory: frontend-new
        run: |
          npm ci
          npm audit --production

  # Build Docker Images
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, code-quality]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/dixis-backend:latest
            ${{ secrets.DOCKER_USERNAME }}/dixis-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend-new
          file: ./frontend-new/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/dixis-frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/dixis-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Deploy to Staging Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /var/www/dixis-staging
            docker-compose pull
            docker-compose up -d
            docker-compose exec app php artisan migrate --force
            docker-compose exec app php artisan cache:clear
            docker-compose exec app php artisan config:cache
            docker-compose exec app php artisan route:cache

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Create Backup
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /var/www/dixis-marketplace
            ./docker/scripts/backup.sh

      - name: Deploy to Production
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /var/www/dixis-marketplace
            docker-compose -f docker-compose.prod.yml pull
            docker-compose -f docker-compose.prod.yml up -d
            docker-compose -f docker-compose.prod.yml exec app php artisan migrate --force
            docker-compose -f docker-compose.prod.yml exec app php artisan cache:clear
            docker-compose -f docker-compose.prod.yml exec app php artisan config:cache
            docker-compose -f docker-compose.prod.yml exec app php artisan route:cache
            docker-compose -f docker-compose.prod.yml exec app php artisan queue:restart

      - name: Health Check
        run: |
          for i in {1..5}; do
            if curl -f https://${{ secrets.PRODUCTION_URL }}/api/health; then
              echo "Health check passed"
              exit 0
            fi
            echo "Health check attempt $i failed, retrying..."
            sleep 10
          done
          echo "Health check failed after 5 attempts"
          exit 1

      - name: Notify Success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'Production deployment successful! ðŸš€'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

      - name: Notify Failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: 'Production deployment failed! ðŸš¨'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}