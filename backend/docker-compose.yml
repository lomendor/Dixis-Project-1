version: '3.8'

services:
  # PHP-FPM Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: dixis-app
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - .:/var/www/html
      - ./docker/php/local.ini:/usr/local/etc/php/conf.d/local.ini
    networks:
      - dixis-network
    depends_on:
      - database
      - redis
    environment:
      - APP_ENV=local
      - APP_DEBUG=true
      - DB_HOST=database
      - DB_DATABASE=dixis
      - DB_USERNAME=dixis_user
      - DB_PASSWORD=dixis_password
      - REDIS_HOST=redis
      - QUEUE_CONNECTION=redis
      - CACHE_DRIVER=redis
      - SESSION_DRIVER=redis

  # Nginx Web Server
  webserver:
    image: nginx:alpine
    container_name: dixis-webserver
    restart: unless-stopped
    ports:
      - "8000:80"
    volumes:
      - .:/var/www/html
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      - dixis-network
    depends_on:
      - app

  # MySQL Database
  database:
    image: mysql:8.0
    container_name: dixis-database
    restart: unless-stopped
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: dixis
      MYSQL_USER: dixis_user
      MYSQL_PASSWORD: dixis_password
      MYSQL_ROOT_PASSWORD: root_password
    volumes:
      - dixis-mysql-data:/var/lib/mysql
      - ./docker/mysql/my.cnf:/etc/mysql/conf.d/my.cnf
    networks:
      - dixis-network
    command: --default-authentication-plugin=mysql_native_password

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: dixis-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - dixis-redis-data:/data
    networks:
      - dixis-network
    command: redis-server --appendonly yes

  # Queue Worker
  queue:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: dixis-queue
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - .:/var/www/html
    networks:
      - dixis-network
    depends_on:
      - database
      - redis
    environment:
      - APP_ENV=local
      - DB_HOST=database
      - REDIS_HOST=redis
      - QUEUE_CONNECTION=redis
    command: php artisan queue:work --verbose --tries=3 --timeout=60

  # Scheduler (Cron)
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: dixis-scheduler
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - .:/var/www/html
    networks:
      - dixis-network
    depends_on:
      - database
      - redis
    environment:
      - APP_ENV=local
      - DB_HOST=database
      - REDIS_HOST=redis
    command: >
      sh -c "while true; do
        php artisan schedule:run --verbose --no-interaction &
        sleep 60
      done"

  # Mailhog for Development Email Testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: dixis-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - dixis-network

  # Adminer for Database Management
  adminer:
    image: adminer:latest
    container_name: dixis-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    networks:
      - dixis-network
    depends_on:
      - database
    environment:
      ADMINER_DEFAULT_SERVER: database

volumes:
  dixis-mysql-data:
    driver: local
  dixis-redis-data:
    driver: local

networks:
  dixis-network:
    driver: bridge