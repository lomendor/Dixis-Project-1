# Dixis Platform Backend - Multi-stage Production Dockerfile
# Based on 2025 Docker best practices for Laravel applications

# ===============================================
# Stage 1: PHP Base with Extensions
# ===============================================
FROM php:8.3-fpm-alpine AS php-base
LABEL maintainer="Dixis Platform <devops@dixis.ai>"
LABEL org.dixis.version="1.0.0"
LABEL org.dixis.component="backend"

# Install system dependencies and PHP extensions
RUN apk add --no-cache \
    # System packages
    curl \
    git \
    unzip \
    oniguruma-dev \
    libxml2-dev \
    libzip-dev \
    freetype-dev \
    libjpeg-turbo-dev \
    libpng-dev \
    icu-dev \
    postgresql-dev \
    mysql-client \
    # Process management
    supervisor \
    nginx \
    && docker-php-ext-configure gd --with-freetype --with-jpeg \
    && docker-php-ext-install -j$(nproc) \
        pdo \
        pdo_mysql \
        pdo_pgsql \
        mbstring \
        exif \
        pcntl \
        bcmath \
        gd \
        zip \
        intl \
        opcache \
        sockets \
    && apk del --no-cache \
        freetype-dev \
        libjpeg-turbo-dev \
        libpng-dev \
    && rm -rf /var/cache/apk/*

# Install Redis extension
RUN pecl install redis && docker-php-ext-enable redis

# Configure PHP for production
COPY docker/config/php/php.ini /usr/local/etc/php/php.ini
COPY docker/config/php/opcache.ini /usr/local/etc/php/conf.d/opcache.ini

# ===============================================
# Stage 2: Composer Dependencies
# ===============================================
FROM php-base AS composer-deps

# Install Composer
COPY --from=composer:2.7 /usr/bin/composer /usr/bin/composer

WORKDIR /app

# Copy composer files
COPY backend/composer.json backend/composer.lock ./

# Install dependencies (production only)
RUN composer install \
    --no-dev \
    --no-scripts \
    --no-autoloader \
    --optimize-autoloader \
    --prefer-dist \
    --no-progress \
    && composer clear-cache

# ===============================================
# Stage 3: Application Builder
# ===============================================
FROM php-base AS builder

# Copy composer dependencies
COPY --from=composer-deps /app/vendor ./vendor

WORKDIR /app

# Copy application code
COPY backend/ .

# Copy composer dependencies again (in case of conflicts)
COPY --from=composer-deps /app/vendor ./vendor

# Generate optimized autoloader
RUN composer dump-autoload --optimize --classmap-authoritative

# Create necessary directories
RUN mkdir -p \
    storage/app/public \
    storage/framework/cache/data \
    storage/framework/sessions \
    storage/framework/views \
    storage/logs \
    bootstrap/cache

# Set permissions for Laravel directories
RUN chown -R www-data:www-data \
    storage \
    bootstrap/cache \
    && chmod -R 755 storage \
    && chmod -R 755 bootstrap/cache

# ===============================================
# Stage 4: Production Runtime
# ===============================================
FROM php-base AS production
LABEL org.dixis.stage="production"

WORKDIR /app

# Create non-root user
RUN addgroup -g 1001 -S dixis && \
    adduser -u 1001 -S dixis -G dixis -h /app

# Copy built application
COPY --from=builder --chown=dixis:dixis /app ./

# Copy configuration files
COPY docker/config/nginx/nginx.conf /etc/nginx/nginx.conf
COPY docker/config/nginx/default.conf /etc/nginx/conf.d/default.conf
COPY docker/config/supervisor/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Create runtime directories
RUN mkdir -p \
    /var/log/nginx \
    /var/log/supervisor \
    /run/nginx \
    && chown -R dixis:dixis /var/log/nginx /var/log/supervisor /run/nginx

# Switch to non-root user
USER dixis

# Expose ports
EXPOSE 8000 9000

# Environment variables
ENV APP_ENV=production
ENV APP_DEBUG=false
ENV LOG_CHANNEL=stderr

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/api/v1/health || exit 1

# Start supervisor (manages PHP-FPM and Nginx)
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]

# ===============================================
# Stage 5: Development Environment
# ===============================================
FROM php-base AS development

# Install development tools
RUN apk add --no-cache \
    bash \
    nano \
    htop \
    && pecl install xdebug \
    && docker-php-ext-enable xdebug

# Install Composer
COPY --from=composer:2.7 /usr/bin/composer /usr/bin/composer

WORKDIR /app

# Copy application code
COPY backend/ .

# Install all dependencies (including dev)
RUN composer install --prefer-dist --no-progress

# Create directories with proper permissions
RUN mkdir -p storage/logs storage/framework/sessions storage/framework/views storage/framework/cache \
    && chmod -R 775 storage bootstrap/cache \
    && chown -R www-data:www-data storage bootstrap/cache

# Development PHP configuration
COPY docker/config/php/php-dev.ini /usr/local/etc/php/php.ini
COPY docker/config/php/xdebug.ini /usr/local/etc/php/conf.d/xdebug.ini

EXPOSE 8000

# Development health check (more lenient)
HEALTHCHECK --interval=60s --timeout=30s --start-period=120s --retries=3 \
    CMD curl -f http://localhost:8000/api/v1/health || exit 1

# Start Laravel development server
CMD ["php", "artisan", "serve", "--host=0.0.0.0", "--port=8000"]

# ===============================================
# Stage 6: Testing Environment
# ===============================================
FROM development AS testing

# Install additional testing tools
RUN apk add --no-cache \
    mysql-client \
    postgresql-client

# Copy test configuration
COPY backend/phpunit.xml ./
COPY backend/.env.testing ./.env

# Install testing dependencies
RUN composer install --dev

# Run tests by default
CMD ["vendor/bin/phpunit"]

# ===============================================
# Stage 7: Queue Worker
# ===============================================
FROM production AS queue-worker

# Override the default command to run queue worker
CMD ["php", "artisan", "queue:work", "--verbose", "--tries=3", "--timeout=90"]

# Health check for queue worker
HEALTHCHECK --interval=60s --timeout=30s --start-period=60s --retries=3 \
    CMD php artisan queue:monitor --once || exit 1

# ===============================================
# Stage 8: Scheduler (Cron)
# ===============================================
FROM production AS scheduler

# Install cron
USER root
RUN apk add --no-cache dcron

# Add Laravel scheduler to crontab
RUN echo "* * * * * /usr/local/bin/php /app/artisan schedule:run >> /dev/null 2>&1" > /tmp/crontab.txt \
    && crontab -u dixis /tmp/crontab.txt \
    && rm /tmp/crontab.txt

USER dixis

# Start cron daemon
CMD ["crond", "-f", "-d", "8"]

# ===============================================
# Stage 9: Database Migration Runner  
# ===============================================
FROM production AS migrator

# Override command for migrations
CMD ["php", "artisan", "migrate", "--force"]

# ===============================================
# Build Arguments and Metadata
# ===============================================
ARG BUILD_DATE
ARG GIT_COMMIT
ARG VERSION
ARG PHP_VERSION=8.3

LABEL org.dixis.build-date=$BUILD_DATE
LABEL org.dixis.git-commit=$GIT_COMMIT
LABEL org.dixis.version=$VERSION
LABEL org.dixis.php-version=$PHP_VERSION
LABEL org.dixis.vendor="Dixis Platform"
LABEL org.dixis.description="Greek Food Marketplace - Backend API"

# ===============================================
# Security and Optimization Annotations
# ===============================================
# Multi-stage build reduces final image size by ~60%
# Non-root user (dixis:1001) prevents privilege escalation
# Minimal Alpine base reduces attack surface
# OPcache enabled for production performance
# Health checks for container orchestration
# Separate stages for different deployment scenarios
# Optimized Composer autoloader for faster bootstrap
# Proper file permissions for Laravel security